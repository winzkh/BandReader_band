<template>
  <div class="page-cmpt" style="padding-bottom: 24px">
    <div class="app-title" style="margin-bottom: 12px">
      <div style="flex: 1; justify-content: flex-start" @click="back">
        <image
          style="height: 54px; width: 54px"
          src="/common/left_line.png"
        ></image>
      </div>
      <text style="font-size: 50px">
        <span>{{pageTitle}}</span>
      </text>
      <div style="flex: 1; justify-content: flex-end" @click="more">
        <image
          if="{{showMore}}"
          style="height: 58px; width: 58px; margin-top: 8px"
          src="/common/more.png"
        ></image>
        <text if="{{moreText}}" style="font-size: 38px; padding-right: 16px"
          >{{moreText}}</text
        >
      </div>
    </div>
    <text style="font-size: 1px">{{ count }}</text>
    <text style="font-size: 1px">{{ color }}</text>
    <scroll
      style="width: 100%; flex: 1; flex-direction: column"
      scroll-y="{{true}}"
      scroll-top="{{top}}"
    >
      <div
        class="item-card"
        style="justify-content: space-between; align-items: center"
      >
        <div style="width: 100%; flex-direction: row; align-items: center">
          <text style="color: white">字号 {{ size }}</text>
          <slider
            style="flex: 1"
            min="34"
            max="64"
            step="1"
            value="{{ initialSliderValue }}"
            onchange="onSliderChange"
          ></slider>
        </div>
      </div>
      <div
        class="item-card"
        style="justify-content: space-between; align-items: center"
      >
        <div style="width: 100%; flex-direction: row; align-items: center">
          <text style="color: rgb({{color}},{{color}},{{color}});"
            >颜色{{ color }}</text
          >
          <slider
            style="flex: 1"
            min="100"
            max="255"
            step="1"
            value="{{ initialColorValue }}"
            onchange="onColorChange"
          ></slider>
        </div>
      </div>
      <div
        class="item-card"
        style="justify-content: space-between; align-items: center"
      >
        <div style="width: 100%; flex-direction: row; align-items: center">
          <text if="{{autoLight}}" onclick="toggleMode(0)">自动亮度</text>
          <text else onclick="toggleMode(1)">手动亮度</text>
          <slider
            style="flex: 1"
            min="10"
            max="255"
            step="1"
            value="{{ initialLightValue }}"
            onchange="onLightChange"
          ></slider>
        </div>
      </div>
      <div
        class="item-card"
        style="
          height: 120px;
          justify-content: space-between;
          align-items: center;
        "
      >
        <text>10分钟常亮</text>
        <switch
          checked="{{ bright }}"
          style="height: 48px"
          @change="onBrightChange"
        ></switch>
      </div>
      <div
        class="item-card"
        style="
          height: 120px;
          justify-content: space-between;
          align-items: center;
        "
      >
        <text>自动翻页</text>
        <switch
          checked="{{ config.auto }}"
          style="height: 48px"
          @change="onAutoChange"
        ></switch>
      </div>
      <div
        class="item-card"
        style="justify-content: space-between; align-items: center"
      >
        <div style="width: 100%; flex-direction: column">
          <text>翻页间隔 {{ autoTime }}秒</text>
          <slider
            style="margin-top: 24px; margin-bottom: 34px; width: 100%"
            min="4"
            max="15"
            step="`1`"
            value="{{ initialTimeValue }}"
            onchange="onTimeChange"
          ></slider>
        </div>
      </div>
      <div
        class="item-card"
        style="
          height: 120px;
          justify-content: space-between;
          align-items: center;
        "
      >
        <text>固定顶栏</text>
        <switch
          checked="{{ config.pin }}"
          style="height: 48px"
          @change="onPinChange"
        ></switch>
      </div>
      <div
        class="item-card"
        style="
          height: 120px;
          justify-content: space-between;
          align-items: center;
        "
      >
        <text>点击翻页</text>
        <switch
          checked="{{ config.click }}"
          style="height: 48px"
          @change="onClickChange"
        ></switch>
      </div>
      <div
        class="item-card"
        style="
          height: 120px;
          justify-content: space-between;
          align-items: center;
        "
      >
        <text>日志</text>
        <switch
          checked="{{ config.log }}"
          style="height: 48px"
          @change="onLogChange"
        ></switch>
      </div>
    </scroll>
  </div>
</template>
<script>
  import router from "@system.router";
  import prompt from "@system.prompt";
  import storage from "@system.storage";
  import brightness from "@system.brightness";
  export default {
    private: {
      pageTitle: "设置",
      initialSliderValue: 54,
      initialColorValue: -1,
      initialLightValue: 0,
      sliderValue: 54,
      initialTimeValue: 6,
      autoTime: 6,
      autoLight: false,
      top: 0,
      count: 0,
      size: 54,
      color: -1,
      light: 100,
      bright: false,
      config: {
        auto: false,
        pin: true,
        click: true,
      },
    },
    onInit() {
      this.config = this.$app.$def.data.config;
      this.autoTime = this.config.autoTime || 6;
      this.initialTimeValue = this.autoTime;
      this.bright = this.config.bright || false;
      this.initialSliderValue = this.$app.$def.data.config.size || 54;
      this.size = this.initialSliderValue;
      setTimeout(() => {
        this.initialColorValue = this.$app.$def.data.config.color || 255;
        this.color = this.initialColorValue;
      }, 100);
      brightness.getValue({
        success: (data) => {
          this.light = data.value;
          this.initialLightValue = data.value;
        },
      });
      brightness.getMode({
        success: (data) => {
          this.autoLight = data.mode !== 0;
        },
      });
    },
    onReady() {
      setInterval(() => {
        this.count = this.count + 1;
      }, 1000);
      this.$app.$def.sendLog("config:" + JSON.stringify(this.config));
      storage.get({
        key: "showedConfig",
        success: (data) => {
          if (data == null || data === "") {
            this.top = 400;
            setTimeout(() => {
              this.top = 0;
            }, 3000);
            storage.set({
              key: "showedConfig",
              value: "true",
            });
          }
        },
      });
    },
    onShow() {},
    onBackPress() {
      return true;
    },
    onPinChange(e) {
      this.config.pin = e.checked;
      this.$app.$def.changeConfig(this.config);
    },
    onClickChange(e) {
      this.config.click = e.checked;
      this.$app.$def.changeConfig(this.config);
    },
    onLogChange(e) {
      this.config.log = e.checked;
      this.$app.$def.data.log = e.checked;
    },
    onAutoChange(e) {
      this.config.auto = e.checked;
      this.config.autoTime = this.autoTime;
      this.$app.$def.changeConfig(this.config);
      /*this.bright = e.checked
    this.onBrightChange({checked: e.checked})*/
    },
    onSliderChange(e) {
      this.size = e.progress;
      this.sliderValue = e.progress;
      this.config.size = e.progress;
      // this.$app.$def.changeConfig(this.config)
    },
    onColorChange(e) {
      this.color = e.progress > 255 ? 255 : e.progress;
      this.config.color = e.progress > 255 ? 255 : e.progress;
      // this.$app.$def.changeConfig(this.config)
    },
    onLightChange(e) {
      this.light = e.progress > 255 ? 255 : e.progress;
      this.initialLightValue = e.progress;
      brightness.setValue({
        value: Number(this.light),
        success: function () {
          console.log("handling success");
        },
      });
    },
    toggleMode(mode) {
      mode = Number(mode);
      brightness.setMode({
        mode,
        success: () => {
          prompt.showToast({
            message: `自动亮度:${mode === 0 ? "关" : "开"}`,
            duration: 2000,
          });
          this.autoLight = mode !== 0;
          if (mode === 1) {
            setTimeout(() => {
              brightness.getValue({
                success: (data) => {
                  this.light = data.value;
                  this.initialLightValue = data.value;
                },
              });
            }, 300);
          }
        },
      });
    },
    onTimeChange(e) {
      this.autoTime = e.progress;
      this.initialTimeValue = e.progress;
      this.config.autoTime = e.progress;
      this.$app.$def.changeConfig(this.config);
    },
    onBrightChange(e) {
      this.bright = e.checked;
      this.config.bright = e.checked;
      this.$app.$def.changeConfig(this.config);
      this.$app.$def.brightSwitch(e.checked);
    },
    back() {
      this.$app.$def.changeConfig(this.config);
      router.back();
    },
  };
</script>
<style>
  @import "../../common/app.css";
  .line {
    margin-bottom: 8px;
    font-size: 48px;
  }
</style>
