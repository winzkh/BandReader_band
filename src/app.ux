<script>
    import interconnect from '@system.interconnect'
    import storage from '@system.storage'
    import file from '@system.file'
    import prompt from '@system.prompt'
    import mitt from 'mitt'
    import brightness from '@system.brightness'
    import sensor from '@system.sensor'
    import app from '@system.app'

    let counter = 0
    let tempList = []
    let writeLock
    let writePromise
    export default {
        onCreate() {
            const that = this
            this.data.emitter = mitt()

            this.data.emitter.on('del_book', this.delBook)
            this.data.emitter.on('update_book', this.updateBook)
            this.data.emitter.on('chapter_saved', this.sendChapterSaved)
            this.data.emitter.on('chunk_saved', this.sendChunkSaved)
            // this.data.emitter.on('book_info', this.bookInfo)

            console.log('app created')
            this.loadBooks().then()
            this.rmDir()
            //conn
            this.data.conn = interconnect.instance()
            this.data.message = "conn"
            this.data.emitter.emit("log", "conn")
            /*setInterval(()=>{
                this.sendLog("alive "+new Date().getTime())
            },3000)*/
            this.data.conn.onmessage = (data) => {
                console.log(`received message: ${data.data}`)
                this.data.message = "conn"
                const {type, content} = JSON.parse(data.data)
                this.data.emitter.emit("log", type)

                if (type === 'add_book') {
                    if (content) {
                        that.addBook(content)
                    }
                }
                if (type === 'add_chapter') {
                    if (content) {
                        that.saveChapter(content)
                    }
                }
                if (type === 'book_info') {
                    that.bookInfo()
                }
                if (type === 'update_book') {
                    if (content) {
                        that.updateBook(content)
                    }
                }
                if (type === "update_cover") {
                    if (content) {
                        that.updateCover(content)
                    }
                }
                if (type === "list_info") {
                    if (content) {
                        that.listInfo(content).then()
                    }
                }
                if (type === "exit") {
                    app.terminate()
                }
                counter++
                this.data.emitter.emit('conn', type + ' ' + counter)
            }
            storage.get({
                key: 'config',
                success: function (data) {
                    if (data) {
                        that.data.config = JSON.parse(data)
                        that.data.config.auto = that.data.config.auto ? that.data.config.auto : false
                        that.data.config.size = that.data.config.size ? that.data.config.size : 54
                        that.data.config.color = that.data.config.color ? that.data.config.color : 255
                        that.data.config.autoTime = that.data.config.autoTime ? that.data.config.autoTime : 6
                        that.data.config.next = false
                        that.data.config.bright = that.data.config.bright ? that.data.config.bright : false
                        that.data.config.click = String(that.data.config.click) === 'true'
                        that.data.config.log = false
                        that.brightSwitch(that.data.config.bright)
                    } else {
                        that.data.config = {
                            auto: false,
                            pin: true,
                            click: true,
                        }
                    }
                },
                fail: function (data, code) {
                    console.log(`handling fail, code = ${code}`)
                }
            })
        },
        onDestroy() {
            console.log('app destroyed')
        },
        rmDir() {
            const that = this
            storage.get({
                key: 'first_start',
                success: function (data) {
                    if (data && Number(data) === 1) {
                    } else {
                        storage.set({
                            key: 'first_start',
                            value: '1',
                            success: function (data) {

                            },
                            fail: function (data, code) {
                                console.log(`handling fail, code = ${code}`)
                            }
                        })
                        file.rmdir({
                            uri: 'internal://files/reader',
                            recursive: true,
                            success: function (data) {
                                setTimeout(() => {
                                    that.sendLog('first remove')
                                }, 2000)
                            },
                            fail: function (data, code) {
                                console.log(`handling fail, code = ${code}`)
                            }
                        })
                        file.rmdir({
                            uri: 'internal://mass/reader',
                            recursive: true,
                            success: function (data) {
                                console.log(`handling success`)
                            },
                            fail: function (data, code) {
                                console.log(`handling fail, code = ${code}`)
                            }
                        })
                    }
                },
                fail: function (data, code) {
                    console.log(`handling fail, code = ${code}`)
                }
            })
        },
        async loadBooks() {
            const that = this
            const promise = new Promise((resolve, reject) => {
                //加载书架
                storage.get({
                    key: 'books',
                    success: function (data) {
                        that.data.books = (JSON.parse(data) || []).map(item => {
                            const temp = item
                            temp.chapters = Number(item.chapters)
                            return temp
                        })
                        that.data.emitter.emit('add_book')
                        resolve(true)
                    },
                    fail: function (data, code) {
                        resolve(false)
                    }
                })
            })
            await promise
        },
        addBook(book) {
            const that = this
            if (this.data.books.some(item => Number(item.id) === Number(book.id))) return
            this.sendLog("添加新书 " + book.name)
            book.cover = ""
            this.data.books.push(book)
            storage.set({
                key: 'books',
                value: JSON.stringify(
                    this.data.books
                ),
                success: function (data) {
                    console.log('handling success')
                    that.data.emitter.emit('add_book')
                },
                fail: function (data, code) {
                    console.log(`handling fail, code = ${code}`)
                }
            })
        },
        async listInfo(content) {
            const that = this
            let {index, bid, first, end, list} = content
            let append = true
            if (Boolean(first)) {
                append = false
            }
            file.writeText({
                uri: `internal://files/reader/${bid}/list.txt`,
                text: list + (Boolean(end) ? '' : '\n'),//最后一个不加逗号
                append,
                success: function () {
                    // that.sendLog(`save listInfo ${bid} ${list.length}`)
                    if (Boolean(end)) {
                        that.updateBook({id: bid, list: true})
                    }
                    tempList = []
                },
                fail: function (data, code) {
                    that.sendLog(`save listInfo fail ${bid} ${list.length}`)
                    tempList = []
                }
            })
        },
        bookInfo() {
            this.data.conn.send({
                data: {
                    data: JSON.stringify({
                        type: 'book_info',
                        content: this.data.books
                    })
                },
                success: () => {
                    console.log(`handling success`)
                    this.data.emitter.emit('log', `success bookInfo`)
                    this.sendLog(`success bookInfo ` + new Date().getTime())
                },
                fail: ({data, code}) => {
                    prompt.showToast({
                        message: `同步信息失败:${code},${data}`,
                        duration: 2000
                    })
                    this.data.emitter.emit('log', `fail:${code},${data}`)
                    /*this.data.emitter.emit('log', `fail:${code},${data}`)
                    setTimeout(()=>{
                        this.data.emitter.emit('book_info')
                    },2000)*/
                }
            })
        },
        sendChapterSaved(index) {
            this.data.conn.send({
                data: {
                    data: JSON.stringify({
                        type: 'chapter_saved',
                        content: String(index),
                        time: new Date().getTime()
                    })
                }
            })
        },
        sendChunkSaved(index) {
            this.data.conn.send({
                data: {
                    data: JSON.stringify({
                        type: 'chunk_saved',
                        content: String(index),
                        time: new Date().getTime()
                    })
                }
            })
        },
        sendLog(msg) {
            if (!this.data.config.log) {
            } else {
                this.data.conn.send({
                    data: {
                        data: JSON.stringify({
                            type: 'log',
                            content: String(msg)
                        })
                    },
                    success: () => {
                    },
                    fail: ({data, code}) => {
                    }
                })
            }
        },
        updateBook(content) {
            // this.data.emitter.emit('log', `updateBook ${Object.keys(content)}`)
            //
            let book = content
            const that = this
            let {id} = book
            let tempArr = that.data.books.map((item) => {
                const temp = item
                if (Number(id) === Number(temp.id)) {
                    Object.assign(temp, book)
                }
                return temp
            })
            that.data.books = tempArr
            this.data.emitter.emit('add_book')
            storage.set({
                key: 'books',
                value: JSON.stringify(
                    this.data.books
                ),
                success: function (data) {
                    console.log('handling success')
                },
                fail: function (data, code) {
                    console.log(`handling fail, code = ${code}`)
                }
            })
        },
        async updateCover(content) {
            let {id, cover, first, end} = content
            if (first) {
                this.data.arr = []
            }
            this.data.arr = this.data.arr.concat(cover.split(',').map(item => Number(item)))
            if (!end) {
                return
            }
            //时间戳
            let timestamp = new Date().getTime()
            let uri = `internal://files/reader/${id}/cover${timestamp}.png`
            let oldUri = this.data.books.find(item => String(item.id) === String(id)).cover
            //oldUri sendlog
            this.sendLog(`oldUri ${oldUri}`)
            file.writeArrayBuffer({
                uri: uri,
                buffer: new Uint8Array(this.data.arr),
                append: false,
                success: async () => {
                    this.data.arr = []
                    prompt.showToast({
                        message: `封面已下载`,
                        duration: 2000
                    })
                    setTimeout(() => {
                        file.delete({
                            uri: oldUri,
                            success: function (data) {
                                prompt.showToast({
                                    message: `旧封面已删除`,
                                    duration: 2000
                                })
                            },
                            fail: function (data, code) {
                                prompt.showToast({
                                    message: `旧封面删除失败`,
                                    duration: 2000
                                })
                            }
                        })
                        this.updateBook({id, cover: uri})
                        this.data.emitter.emit("cover", uri)
                    }, 2000)
                },
                fail: () => {
                    this.data.emitter.emit('log', `updateCover fail`)
                    prompt.showToast({
                        message: `updateCover fail`,
                        duration: 2000
                    })
                }
            })

        },
        delBook(id) {
            this.data.books = this.data.books.filter(item => String(item.id) !== String(id))
            this.data.emitter.emit('add_book')
            storage.delete({
                key: `chapter_${id}`,
                success: function (data) {
                    console.log('handling success')
                },
                fail: function (data, code) {
                    console.log(`handling fail, code = ${code}`)
                }
            })
            file.rmdir({
                uri: 'internal://files/reader/' + id,
                recursive: true,
                success: function (data) {
                    console.log(`handling success`)
                },
                fail: function (data, code) {
                    console.log(`handling fail, code = ${code}`)
                }
            })
            const that = this
            storage.set({
                key: 'books',
                value: JSON.stringify(
                    this.data.books
                ),
                success: function (data) {
                    console.log('handling success')
                    that.bookInfo()
                },
                fail: function (data, code) {
                    console.log(`handling fail, code = ${code}`)
                }
            })
        },
        // chapterCache: "",
        saveChapter(chapter) {
            let that = this
            let {index, bookId, name, paging, content, first, last} = chapter
            try {
                name = name.trim()

                file.writeText({
                    uri: `internal://files/reader/${bookId}/${paging}/${index}_${name}.txt`,
                    text: content,
                    append: !Boolean(first),
                    success: function () {
                        that.data.emitter.emit('chunk_saved',index)
                        if (last) {
                            // that.sendChapterSaved(index)
                            that.data.emitter.emit('chapter_saved',index)
                        }
                    },
                    fail: function (data, code) {
                        prompt.showToast({
                            message: `第${index}章下载失败 ${code}`,
                            duration: 2000
                        })
                    }
                })
            } catch (e) {
                prompt.showToast({
                    message: `接收chunk异常 ${index} ${name}`,
                    duration: 2000
                })
            }
        },
        changeConfig(config) {
            this.data.config = config
            this.sendLog(`changeConfig ${JSON.stringify(config)}`)
            storage.set({
                key: 'config',
                value: JSON.stringify(
                    this.data.config
                ),
                success: function (data) {
                    console.log('handling success')
                },
                fail: function (data, code) {
                    console.log(`handling fail, code = ${code}`)
                }
            })
        },
        brightSwitch(checked) {
            brightness.setKeepScreenOn({
                keepScreenOn: checked,
                success: function () {
                    if (checked) {
                        prompt.showToast({
                            message: '已开启屏幕常亮'
                        })
                    }

                },
                fail: function (data, code) {
                    prompt.showToast({
                        message: '设置屏幕常亮失败'
                    })
                }
            })
        },
        data: {
            conn: {},
            books: [],
            chapters: [],
            message: 'message',
            emitter: {},
            arr: [],
            config: {
                auto: false,
                autoTime: 6,
                pin: true,
                click: true,
                bright: false,
                size: 54,
                color: 255,
                log: false
            },
            next: false,
        }

    }
</script>